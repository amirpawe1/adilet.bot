import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 7341098964
SUPPORT_USERNAME = "xe8oz"
CHANNEL_LINK = "https://t.me/+4KdL8SuRDuA4YjZi"

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", os.getenv("RENDER_EXTERNAL_URL", ""))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

logging.basicConfig(level=logging.INFO)

# üì¶ –ë–æ—Ç –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

pending_users = {}

main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay")],
    [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="about")],
    [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
])

back_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
])

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ê–¥–ª–µ—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_kb
    )

@dp.callback_query(F.data == "pay")
async def pay(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí≥ –¢–∞—Ä–∏—Ñ—ã:\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 4990‚Ç∏\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 19990‚Ç∏\n"
        "‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 44990‚Ç∏\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å—é–¥–∞ üìé (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª).",
        reply_markup=back_kb
    )
    pending_users[callback.from_user.id] = True
    await callback.answer()

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚öΩ –ö–∞–Ω–∞–ª —Ç—Ä–µ–Ω–µ—Ä–∞ –ê–¥–ª–µ—Ç–∞ ‚Äî —ç—Ç–æ:\n"
        "‚Ä¢ –û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ñ—É—Ç–±–æ–ª—É\n"
        "‚Ä¢ –†–∞–∑–±–æ—Ä —Ç–∞–∫—Ç–∏–∫\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤\n\n"
        "–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ —É–ª—É—á—à–∞–π—Ç–µ –∏–≥—Ä—É!",
        reply_markup=back_kb
    )
    await callback.answer()

@dp.callback_query(F.data == "support")
async def support(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f"‚úâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @{SUPPORT_USERNAME}",
        reply_markup=back_kb
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_kb
    )
    await callback.answer()

@dp.message(F.document | F.photo)
async def handle_files(message: types.Message):
    user_id = message.from_user.id
    if user_id in pending_users and pending_users[user_id]:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
        await message.forward(ADMIN_ID)
        await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await bot.send_message(
            ADMIN_ID,
            f"üì• –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ {message.from_user.full_name}\n"
            f"üÜî ID: {message.from_user.id}\n\n"
            f"–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø:\n"
            f"/approve {message.from_user.id}\n\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å:\n"
            f"/reject {message.from_user.id}"
        )
    else:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø', –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.")

@dp.message(Command("approve"))
async def approve(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            user_id = int(parts[1])
            await bot.send_message(
                user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{CHANNEL_LINK}"
            )
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            if user_id in pending_users:
                del pending_users[user_id]
        else:
            await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /approve user_id")
    else:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("reject"))
async def reject(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            user_id = int(parts[1])
            await bot.send_message(
                user_id,
                "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await message.answer(f"‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            if user_id in pending_users:
                del pending_users[user_id]
        else:
            await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /reject user_id")
    else:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

async def handle_health(request):
    return web.Response(text="I'm alive!")

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, dp.start_webhook)
    app.router.add_get("/", handle_health)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    port = int(os.getenv("PORT", "10000"))
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    main()
