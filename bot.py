import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 7341098964
SUPPORT_USERNAME = "xe8oz"
CHANNEL_LINK = "https://t.me/+4KdL8SuRDuA4YjZi"

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", os.getenv("RENDER_EXTERNAL_URL", ""))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

main_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="about")],
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
)

back_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ê–¥–∏–ª–µ—Ç–∞ –ö—É–¥–∞–π–±–µ—Ä–≥–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ –ë–∞–∑–∞ –∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–µ–≥–æ." 
        "–ø–æ–¥–ø–∏—Å–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 4990‚Ç∏ –∏–ª–∏ 9$, –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ–º —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Kaspi.kz"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_kb
    )

@dp.callback_query(F.data == "pay")
async def pay(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–†–µ–∫–≤–µ–∑–∏—Ç—ã: +77777777777"
        "üí≥ –¢–∞—Ä–∏—Ñ—ã:\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 4990‚Ç∏\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 19990‚Ç∏\n"
        "‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 44990‚Ç∏\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å—é–¥–∞ üìé",
        reply_markup=back_kb
    )
    await callback.answer()

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚öΩ –ö–∞–Ω–∞–ª —Ç—Ä–µ–Ω–µ—Ä–∞ –ê–¥–ª–µ—Ç–∞ ‚Äî —ç—Ç–æ:\n"
        "‚Ä¢ –û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ñ—É—Ç–±–æ–ª—É\n"
        "‚Ä¢ –†–∞–∑–±–æ—Ä —Ç–∞–∫—Ç–∏–∫\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤\n\n"
        "–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ —É–ª—É—á—à–∞–π—Ç–µ –∏–≥—Ä—É!",
        reply_markup=back_kb
    )
    await callback.answer()

@dp.callback_query(F.data == "support")
async def support(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f"‚úâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @{SUPPORT_USERNAME}",
        reply_markup=back_kb
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_kb
    )
    await callback.answer()

@dp.message(F.document | F.photo)
async def handle_files(message: types.Message):
    if ADMIN_ID:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{message.from_user.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{message.from_user.id}")]
            ]
        )
        await message.forward(ADMIN_ID)
        await bot.send_message(
            ADMIN_ID,
            f"üìé –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç @{message.from_user.username or message.from_user.id}",
            reply_markup=kb
        )
        await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É.")
    else:
        await message.answer("‚ö†Ô∏è ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω.")

@dp.callback_query(F.data.startswith("approve"))
async def approve(callback: types.CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        user_id = int(callback.data.split(":")[1])
        await bot.send_message(user_id, f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{CHANNEL_LINK}")
        await callback.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø!")
    else:
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

@dp.callback_query(F.data.startswith("reject"))
async def reject(callback: types.CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        user_id = int(callback.data.split(":")[1])
        await bot.send_message(user_id, "‚ùå –í–∞—à —á–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
    else:
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

async def handle_webhook(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

async def handle_health(request):
    return web.Response(text="I'm alive!")

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get("/", handle_health)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    port = int(os.getenv("PORT", "10000"))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
