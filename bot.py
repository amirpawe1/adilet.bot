import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 7341098964
SUPPORT_USERNAME = "xe8oz"
CHANNEL_LINK = "https://t.me/+4KdL8SuRDuA4YjZi"

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", os.getenv("RENDER_EXTERNAL_URL", ""))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay")
    builder.button(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="about")
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    builder.adjust(1)
    return builder.as_markup()

def pay_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="1 –º–µ—Å—è—Ü ‚Äî 5000‚Ç∏", callback_data="pay_1m")
    builder.button(text="3 –º–µ—Å—è—Ü–∞ ‚Äî 12000‚Ç∏", callback_data="pay_3m")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()

def support_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=f"https://t.me/{SUPPORT_USERNAME}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()

def about_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    return builder.as_markup()

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ê–¥–ª–µ—Ç–∞!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É ‚öΩ",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "pay")
async def pay_section(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 5000‚Ç∏\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 12000‚Ç∏\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å—é–¥–∞ üìé",
        reply_markup=pay_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "about")
async def about_section(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚öΩ –ö–∞–Ω–∞–ª —Ç—Ä–µ–Ω–µ—Ä–∞ –ê–¥–ª–µ—Ç–∞ ‚Äî —ç—Ç–æ:\n"
        "‚Ä¢ –û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ñ—É—Ç–±–æ–ª—É\n"
        "‚Ä¢ –†–∞–∑–±–æ—Ä —Ç–∞–∫—Ç–∏–∫\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ —É–ª—É—á—à–∞–π—Ç–µ –∏–≥—Ä—É! üí™",
        reply_markup=about_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "support")
async def support_section(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚úâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá",
        reply_markup=support_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("pay_"))
async def fake_payment(callback: types.CallbackQuery):
    if callback.data == "pay_1m":
        text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: 1 –º–µ—Å—è—Ü ‚Äî 5000‚Ç∏"
    else:
        text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: 3 –º–µ—Å—è—Ü–∞ ‚Äî 12000‚Ç∏"
    await callback.message.edit_text(
        f"{text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å—é–¥–∞ üìé",
        reply_markup=about_menu()
    )
    await callback.answer()

@dp.message(F.document | F.photo)
async def handle_payment_proof(message: types.Message):
    await message.forward(ADMIN_ID)
    await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@dp.message(F.document | F.photo)
async def handle_files(message: types.Message):
    if ADMIN_ID:
        await message.forward(ADMIN_ID)
        await bot.send_message(ADMIN_ID, f"üí° –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {message.from_user.id}\n"
                                         f"–ß—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
                                         f"/approve {message.from_user.id}")
        await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É.")
    else:
        await message.answer("‚ö†Ô∏è ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É!")

@dp.message(Command("approve"))
async def approve(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            user_id = int(parts[1])
            try:
                await bot.send_message(user_id, f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{CHANNEL_LINK}")
                await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /approve user_id")
    else:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def main():
    app = web.Application()
    app.router.add_get("/", health)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    port = int(os.getenv("PORT", "10000"))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()

